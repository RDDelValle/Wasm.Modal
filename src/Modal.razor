@if (Dictionary.Any())
{
    
    <div class="modal" id="modal"
         aria-modal="true" role="dialog" tabindex="-1"
         aria-labelledby="@($"{Dictionary.Last().Value.ChildContentType}Title")">@* fade show *@
        
        <div class="modal-backdrop" @onclick="HandleBackdropClick"></div>@* fade show *@
        
        @foreach (var component in Dictionary)
        {
            <ModalDialog Model="@component.Value" ParentModal="@this">
                @CreateComponent(component.Value.ChildContentType)
            </ModalDialog>
        }
        
    </div>
}

@implements IDisposable
@implements IModal
@inject IModalManager ModalManager

@code {

    private Dictionary<Type, ModalModel> Dictionary { get; } = [];

    protected override void OnInitialized()
    {
        ModalManager.OnCreateModal += HandleCreateModal;
        base.OnInitialized();
    }

    public async Task CloseModalDialogAsync(Type type)
    {
        if (!Dictionary.ContainsKey(type))
            return;
        Dictionary.Remove(type);
        await InvokeAsync(StateHasChanged);
    }

    private async void HandleCreateModal(object? sender, CreateModalEventArgs args)
    {
        if (Dictionary.ContainsKey(args.Model.ChildContentType))
            return;

        Dictionary.Add(args.Model.ChildContentType, args.Model);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleBackdropClick()
    {
        var model = Dictionary.Last().Value;
        if (model.HasStaticBackdrop)
            return;
        await CloseModalDialogAsync(model.ChildContentType);
    }
    
    private RenderFragment CreateComponent(Type type)
    {
        return builder =>
        {
            builder.OpenComponent(0, type);
            builder.CloseComponent();
        };
    }
    
    public void Dispose()
    {
        ModalManager.OnCreateModal -= HandleCreateModal;
    }

}