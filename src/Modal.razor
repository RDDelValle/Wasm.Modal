@if (Dictionary.Any())
{
    
    <div class="modal" id="modal"
         aria-modal="true" role="dialog" tabindex="-1"
         aria-labelledby="@($"{Dictionary.Last().Value.ChildContentType}Title")">@* fade show *@
        
        <div class="@BackdropClass" @onclick="HandleBackdropClick"></div>@* fade show *@
        
        @foreach (var component in Dictionary)
        {
            <ModalDialog Model="@component.Value" ParentModal="@this">
                @CreateComponent(component.Value.ChildContentType)
            </ModalDialog>
        }
        
    </div>
}

@implements IDisposable
@implements IModal
@inject IModalManager ModalManager

@code {

    private Dictionary<Type, ModalModel> Dictionary { get; } = [];

    private string BackdropClass
    {
        get
        {
            var value = "modal-backdrop";
            if (_showingBackdrop)
                value += " showing";
            if (_showBackdrop)
                value += " show";
            if (_hidingBackdrop)
                value += " hiding";
            return value;
        }
    }

    private bool _showBackdrop;
    private bool _showingBackdrop;
    private bool _hidingBackdrop;

    protected override void OnInitialized()
    {
        ModalManager.OnCreateModal += HandleCreateModal;
        base.OnInitialized();
    }

    public async Task CloseModalDialogAsync(Type type)
    {
        if (!Dictionary.ContainsKey(type))
            return;
        if (Dictionary.Count == 1)
        {
            _hidingBackdrop = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(300);
            _hidingBackdrop = false;
            _showBackdrop = false;
        }
        Dictionary.Remove(type);
        await InvokeAsync(StateHasChanged);
    }

    private async void HandleCreateModal(object? sender, CreateModalEventArgs args)
    {
        if (Dictionary.ContainsKey(args.Model.ChildContentType))
            return;
        Dictionary.Add(args.Model.ChildContentType, args.Model);
        await InvokeAsync(StateHasChanged);
        
        if(_showBackdrop)
            return;
        
        _showingBackdrop = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(300);
        _showingBackdrop = false;
        _showBackdrop = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleBackdropClick()
    {
        var model = Dictionary.Last().Value;
        if (model.HasStaticBackdrop)
            return;
        if (Dictionary.Count == 1)
        {
            _showBackdrop = false;
        }
        // no animation just kill the chain it
        Dictionary.Remove(model.ChildContentType);
        await InvokeAsync(StateHasChanged);
    }
    
    private RenderFragment CreateComponent(Type type)
    {
        return builder =>
        {
            builder.OpenComponent(0, type);
            builder.CloseComponent();
        };
    }
    
    public void Dispose()
    {
        ModalManager.OnCreateModal -= HandleCreateModal;
    }

}